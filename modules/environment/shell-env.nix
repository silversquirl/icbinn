{
  config,
  lib,
  ...
}: {
  options.environment = {
    variables = lib.mkOption {
      default = {};
      example = {
        EDITOR = "nvim";
        VISUAL = "nvim";
      };
      description = ''
        A set of environment variables used in the global
        These variables will be set on shell initialisation (e.g. in /etc/profile).

        The value of each variable can be either a string or a list of
        strings.  The latter is concatenated, interspersed with colon
        characters.

        Setting a variable to `null` does nothing. You can override a
        variable set by another module to `null` to unset it.
      '';
      type = lib.types.attrsOf (
        lib.types.nullOr (lib.types.oneOf [
          (lib.types.listOf (lib.types.oneOf [
            lib.types.int
            lib.types.str
            lib.types.path
          ]))
          lib.types.int
          lib.types.str
          lib.types.path
        ])
      );
      apply = let
        toStr = v:
          if lib.isPath v
          then "${v}"
          else toString v;
      in
        attrs:
          lib.mapAttrs (n: v:
            if lib.isList v
            then lib.concatMapStringsSep ":" toStr v
            else toStr v) (
            lib.filterAttrs (n: v: v != null) attrs
          );
    };

    extraInit = lib.mkOption {
      default = "";
      description = ''
        Shell script code called during global environment initialisation
        after all variables and profileVariables have been set.
        This code is assumed to be shell-independent, which means you should
        stick to pure sh without sh word split.
      '';
      type = lib.types.lines;
    };

    loginShellInit = lib.mkOption {
      default = "";
      description = ''
        Shell script code called during login shell initialisation.
        This code is assumed to be shell-independent, which means you should
        stick to pure sh without sh word split.
      '';
      type = lib.types.lines;
    };
  };

  config = let
    cfg = config.environment;
    envVar = name: values: let
      str = builtins.concatStringsSep ":" (lib.toList values);
    in "export ${name}=${lib.escapeShellArg str}";
    envVars = lib.concatMapAttrsStringSep "\n" envVar cfg.variables;
  in {
    environment.etc."profile.d/00-icbinn.sh".text = ''
      # autogenerated by icbinn

      ${envVars}

      ${cfg.extraInit}

      ${cfg.loginShellInit}
    '';
  };
}
